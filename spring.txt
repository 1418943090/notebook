
Ioc 依赖注入 控制反转

降低 耦合性 各层分离

spring 概念

    spring 春天
  
开源轻量级(不需要依赖其他框架)
一站式框架  使用JavaBean代替EJB(重量级框架)

spring在javaee三层结构中，每一层都提供不同的解决技术

web层 springmvc
service层 spring的loc
dao spring jdbctemplate



核心 AOP(面向切面编程)  IOC(依赖注入，控制反转)

aop 扩展功能不是修改源码实现

-----------------------------------------------
 
IOC 依赖注入 控制反转   面向接口编程  便于升级维护
不需要new使用对象 交给spring配置文件管理 ----底层原理---反射 ---

IOC底层原理  

xml配置文件
dom4J解析xml
工厂设计模式
反射

-------------------------------------------------
使用工厂模式解耦合操作
-------------------------------------------------
bean管理  

bean实例化的三种方式

使用类的无参构造创建(最常用)
使用静态工厂创建实例
使用实例工厂
---------------------------------------------
bean常用属性

id--------- 起名称，id的属性值不能包括特殊字符。代码中根据id获取对象
class------ 创建对象所在全路径
name------- name作用和id类似。name可以包括特殊字符。遗留问题， 目前不使用。
scope------ 范围 对象范围 设置类  singleton 默认值，单例 重点
                                  prototype 多例         重点
                                  request
                                  session
                                  globalSession

-------------------------------------------------------------
属性注入
三种方式
  
  有参构造
  set方法
  接口注入
  public interface Dao
  {
   public void delete (Strign naem);
  }
  public class Daoimpl implements Dao{

  Strign name;
  
  void delete(String name)
  this.name=name;

  }
-----------------------------------------------------------
带参构造
<bean id="" class="" >
      <constructor-arg name=" " value=" "></constuctor-arg>set用的最多
</bean>
--------------------------------------------------------------
set方法

  <bean id="" class="">
      <property name="" value=" "></property>
                         ref=""如果是类的话
  </bean>
---------------------------------------------------------------
P名称空间注入
引入命名空间
<xmlns:p= "http://www.springframework.org/schema/p">
<bean id=person class="  " p:pname="lidf"></bean>
                有参构造     属性名属性值
--------------------------------------
注入复杂类型数据
1:数组
2:list
3:map
4:properties

-----------------------------
<bean id=" " class=" ">
    <property name="">string
       <list>
         <value>hauh</value>
         <value>arehtrt</value>
       </list>

    </property>
    <property name="">list
       <list>
         <value>hauh</value>
         <value>arehtrt</value>
       </list>
    </property>

    <property name="">map
       <map>
        <entry key="" value=" "></entry>
       </map>
    </property>

    <property name="">property
       <props>
          <prop key="driverclass">com.mysql.jdbc.Driver</prop>
       </props>

    </property>
</bean>
------------------------------------------------------------
IOC DI区别
把对象创建交给spring管理   
DI依赖注入，向类里面的属性设置值
关系 依赖注入不能单独存在，需要在IOC基础之上完成操作

---------------------------------------------
Spring整合web
把加载配置文件和创建对象过程，在服务器启动时候完成
ServletContext
监听器
---------------
在服务器启动时候，为每个项目创建一个servletContext对象
在ServletContext对象创建时候，使用监听器可以具体到ServletContext对象在什么时候创建
使用监听器监听到ServletContext对象创建的时候
加载spring配置文件，把配置文件配置对象创建
把创建出来的对象放到servletContext域对象里面(setAttribute方法)
获取对象的时候，到ServletContext域得到(getAttrbute)
----------------------------------------------------
注解 代码里面一些特殊的标记

@+注解名称(属性名称=属性值) 
 <!-- 开启注解扫描 -->
    <context:component-scan base-package="com.spring2"></context:component-scan>
    <!-- 只会扫描注解上的操作 -->
    <context:annotation-config></context:annotation-config>

  @Component(value="")相当于id
  @Contrtoller web层
  @Service 业务层
  @Repository持久层
  这四个注解功能是一样的，都创建对象
  ---------------------------
  创建对象单实例还是多实例
  @Scope(value="protoType" )
                singleton
------------------------
注解注入属性

@Autowired自动装配 自动注入
或
@Resource(name="XXX") 需要和 @Component(value="XXX") 值一样

配置文件和注解混合使用
1 创建对象操作使用配置文件方式实现

2 注入属性的操作使用注解方式实现
-----------------------------------------------
AOP 面向切面编程
扩展功能，不能修改源代码实现

AOP原理 
采用横向抽取机制取代了传统的纵向继承体系重复性代码
底层使用动态代理实现
使用动态代理方式，创建接口实现类代理对象

创建和??类平级的对象
这个对象不是真正对象，代理对象
实现和??相同的功能

使用jdk动态代理，针对有接口情况
----------------------------------
没有接口情况

创建???类的子类的代理对象          ---------------------------------
在子类里面调用父类的方法完成增强  ！！！！使用cglib动态代理！！！！！|
           
                             -------------------------------------
 
 -----------------------------------------------------------------
 Joinpoint连接点  类里面哪些方法可以被增强。这些方法称为连接点
 ***Pointcup切入点   在类面可以有很多方法被增强，比如在实际操作中，只是增强了类里面add()。实际增强的方法称为切入点
 ***Advice增强       实际增强的逻辑，称为增强 前直通知，后置通知 异常通知 最终通知   环绕通知 
                                            方法执行前  后    出现异常  后置之后   计算运行时间

 ***Aspect切面       把增强应用到具体方法上面，过程称为切面
                     把增强用到切入点过程
 Introduction    引介动态添加属相和方法
 Target  目标对象
 Weaving    织入 把增强应用到目标过程中

--------------------------------------------------------------
Spring 的 AOP操作

使用 Aspectj 实现 
是一个面向切面的框架，它扩展了java语言。

使用 aspectj实现aop有两种方式

1 xml配置文件
2 注解

---------------------------------------------------------
使用表达式配置切入点

execution(<访问修饰符>?<返回类型><方法名>(<参数>)<异常>)
execution(* cn.fsre(..))
execution(* *.*(..))
---------------------------------------------------------
jdbctemplate   Dao层
对jdbc进行封装
jdbctemplate使用crud操作
-------------------------------------------------------------
增
DriverManagerDataSource dataSource = new DriverManagerDataSource();
		dataSource.setDriverClassName("com.mysql.jdbc.Driver");
		dataSource.setUrl("jdbc:mysql://localhost/frank");
		dataSource.setUsername("root");
		dataSource.setPassword("huang110");
		
		JdbcTemplate jt = new JdbcTemplate(dataSource);
		
		String sql = "insert into user values(?,?,?)";
		int row = jt.update(sql,1,"ag",5);
		System.out.println(row);
-------------------------------------------------------------
查询
返回构造的对象 jt.queryForObject(String sql,RowMapper<T> ,Object ...);
                              接口
          RowMapper需要自己实现类
          {
          	构造一个对象
          }
-----------------------------------------------------------------------
List<T> jt.query(String sql,RowMapper<T> ,Object ...)
--------------------------------------------------------------
spring配置连接池


------------------------------------------------------------------------
c3p0
------------------------------------------------------------------------
dao使用jdbcTemplate
-----------------------------------------------------------------
<bean id="mysql_pool" class="com.mchange.v2.c3p0.ComboPooledDataSource">
       <!-- 注入属性值 -->
       <property name="driverClass" value="com.mysql.jdbc.Driver"></property>
       <property name="jdncurl" value="jdbc:mysql://localhost/frank"></property>
       <property name="user" value="root"></property>
       <property name="password" value="haung110"></property>
    </bean>
    
   <bean id="useService" class="com.c3p0.UserService">
     <property name="useDao" ref="useDao"></property>
   </bean>
   <bean id="useDao" class="com.c3p0.UseDao">
    <property name="jdbcTemplate" ref="jdbctemple"></property>
   </bean>
   
   <bean id="jdbctemple" class="org.springframework.jdbc.core.JdbcTemplate">
      <property name="dataSource" ref="mysql_pool"></property>
   </bean>
----------------------------------------------------------------------------
事务

概念 
 --> 对数据操作的基本单元，要么都执行，要么都不执行  独立性，一致性，原子性，持续性
 -->
事务管理的两种方式
1 编程式事务管理
2 声明式事务管理
  1基于配置文件
  2基于注解
接口
PlatformTransactionManager 事务管理器

spring针对不同的dao层框架。提供接口不同实现类

首先配置事务管理类
----------------------------------------------------
搭建转账环境

service 业务逻辑层
dao层单纯对数据库操作，在service层处理业务
-----------------------------------------------------
xml配置文件方式 
  <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="">
       <property name="datasource" ref="mysql_pool"></property>
    </bean>
    <!-- 配置事务增强 -->
    <tx:advice id="txadvice" transaction-manager="transactionManager">
       <tx:attributes>
          <tx:method name="account*" propagation="REQUIRED"/>
       </tx:attributes>
    </tx:advice>
    <!-- 配置切面 -->
    <aop:config>
      <aop:pointcut expression="execution()" id="pointcut"/>
      <aop:advisor advice-ref="txadvice" pointcut-ref="pointcut"/>
    </aop:config>
-------------------------------------------------------
注解


第一步 配置事务管理器
第二步 配置事务注解
第三步 在使用事务类上注解
@Transactional
-----------------------------------------------------
Hibernate
ORM思想
对象关系映射思想
如果单纯使用hibernate框架，核心配置文件位置固定
如果和spring进行整合 位置不做要求

在spring框架对hibernate进行封装 hibernateTemplate
---------------------------------------------------
Struct 2

action创建的三种方式
配置action访问路径
使用通配符方式配置

在action获取表单提交数据

值栈

拦截器

---------------------------------------------------
ssh整合思想

web层 struct

service层 spring

dao层   hibernate 对数据进行crud操作

--------------------------
两个框架整合
->
   struct2 和 spring框架整合
       把struct2的action的创建交给spring进行管理
        <bean id="" class="" scope="protoType"></bean>
   spring框架和hibernate框架整合
        hibernate连接池的配置交给spring配置
        第一次访问很慢 创建sessionFactory
        把sessionFactory对象交给spring管理
        随着服务器的启动创建sessionFactory
-----------------------------------------------------------------
